Sub AllStocksAnalysisRefactored()    'Defines variables for start and end times and desired year of analysis    Dim startTime As Single    Dim endTime  As Single    yearValue = InputBox("What year would you like to run the analysis on?")    ' Starts the timer for the program    startTime = Timer        'Formats the output sheet on All Stocks Analysis worksheet    Worksheets("All Stocks Analysis").Activate        Range("A1").Value = "All Stocks (" + yearValue + ")"        'Creates the header row results of All Stocks Analysis    Cells(3, 1).Value = "Ticker"    Cells(3, 2).Value = "Total Daily Volume"    Cells(3, 3).Value = "Return"    'Initializes array of all tickers    Dim tickers(12) As String        tickers(0) = "AY"    tickers(1) = "CSIQ"    tickers(2) = "DQ"    tickers(3) = "ENPH"    tickers(4) = "FSLR"    tickers(5) = "HASI"    tickers(6) = "JKS"    tickers(7) = "RUN"    tickers(8) = "SEDG"    tickers(9) = "SPWR"    tickers(10) = "TERP"    tickers(11) = "VSLR"        'Activates selected data worksheet from input of desired year    Worksheets(yearValue).Activate        'Gets the number of rows to loop over    RowCount = Cells(Rows.Count, "A").End(xlUp).Row        '1a) Creates a ticker Index and sets it to 0. Ticker index allows us to loop through the tickers and output arrays created in the next step (1b).    TickerIndex = 0    '1b) Creates three output arrays to store total volume, starting price, and ending price for each ticker.    Dim TickerVolumes(12) As Long    Dim TickerStartingPrices(12) As Single    Dim TickerEndingPrices(12) As Single            ''2a) Creates a for loop to initialize the tickerVolumes to zero (all TickerVolumes in the array start at 0).    For a = 0 To 11        TickerVolumes(a) = 0    Next a            ''2b) Loops over all the rows in the spreadsheet to execute code that will capture/populate data for all arrays from step 1b.    For i = 2 To RowCount                '3a) Increase volume for current ticker        If Cells(i, 1) = tickers(TickerIndex) Then            TickerVolumes(TickerIndex) = TickerVolumes(TickerIndex) + Cells(i, 8).Value        End If        '3b) Checksif the current row is the first row with the selected tickerIndex. If so, stores starting price into TickerStartingPrices array for TickerIndex.        If Cells(i - 1, 1).Value <> tickers(TickerIndex) And Cells(i, 1).Value = tickers(TickerIndex) Then            TickerStartingPrices(TickerIndex) = Cells(i, 6).Value        End If                '3c) Checks if the current row is the last row with the selected ticker.        'If so, stores the ending price into TickerEndingPrices array for TickerIndex.        'If the next row’s ticker doesn’t match, increase the tickerIndex.        If Cells(i, 1).Value = tickers(TickerIndex) And Cells(i + 1, 1).Value <> tickers(TickerIndex) Then            TickerEndingPrices(TickerIndex) = Cells(i, 6).Value            '3d) Increase the tickerIndex.            TickerIndex = TickerIndex + 1        End If    'Goes to the next ticker and runs loop again starting at 2b.    Next i            '4) Loops through arrays to output the Ticker, Total Daily Volume, and Return into sheet All Stocks Analysis.    For j = 0 To 11                Worksheets("All Stocks Analysis").Activate        Cells(4 + j, 1).Value = tickers(j)        Cells(4 + j, 2).Value = TickerVolumes(j)        Cells(4 + j, 3).Value = TickerEndingPrices(j) / TickerStartingPrices(j) - 1            Next j            'Formats All Stocks Analysis sheet to highlight stocks that perform well (green) or not (red)    Worksheets("All Stocks Analysis").Activate    Range("A3:C3").Font.FontStyle = "Bold"    Range("A3:C3").Borders(xlEdgeBottom).LineStyle = xlContinuous    Range("B4:B15").NumberFormat = "#,##0"    Range("C4:C15").NumberFormat = "0.0%"    Columns("B").AutoFit    dataRowStart = 4    dataRowEnd = 15    For k = dataRowStart To dataRowEnd        If Cells(k, 3) > 0 Then            Cells(k, 3).Interior.Color = vbGreen        Else            Cells(k, 3).Interior.Color = vbRed        End If    Next k     'Ends the timer and records endTime once formatting is complete.    endTime = Timer    MsgBox "This code ran in " & (endTime - startTime) & " seconds for the year " & (yearValue)


'NOTE: This is extra code that I made for fun!'Displays the run time in new sheet cummulativelyWorksheets("Run Times").ActivateIf yearValue = 2017 Then    NextColumn = 7ElseIf yearValue = 2018 Then    NextColumn = 8Else    MsgBox ("Pick a year in this data set/")End IfNextRow = Cells(Rows.Count, NextColumn).End(xlUp).RowCells(NextRow + 1, NextColumn).Value = endTime - startTimeEnd Sub
